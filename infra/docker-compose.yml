version: "3.9"
services:
  caddy:
    image: caddy:2.7
    restart: unless-stopped
    environment:
      ACME_AGREE: "true"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - edge
      - internal
    ports:
      - "80:80"
      - "443:443"

  gateway-api:
    build:
      context: ..
      dockerfile: infra/dockerfiles/gateway.Dockerfile
    env_file:
      - ../.env
    environment:
      ENVIRONMENT: production
      LIVE: "${LIVE:-0}"
    depends_on:
      - postgres
      - redis
      - nats
      - risk-manager
    networks:
      - internal
    restart: unless-stopped

  data-ingestor:
    build:
      context: ..
      dockerfile: infra/dockerfiles/data_ingestor.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - nats
    networks:
      - internal
    restart: unless-stopped

  news-ingestor:
    build:
      context: ..
      dockerfile: infra/dockerfiles/news_ingestor.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - nats
    networks:
      - internal
    restart: unless-stopped

  feature-pipeline:
    build:
      context: ..
      dockerfile: infra/dockerfiles/feature_pipeline.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - nats
    networks:
      - internal
    restart: unless-stopped

  llm-agents:
    build:
      context: ..
      dockerfile: infra/dockerfiles/llm_agents.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - feature-pipeline
      - nats
    networks:
      - internal
    restart: unless-stopped

  risk-manager:
    build:
      context: ..
      dockerfile: infra/dockerfiles/risk_manager.Dockerfile
    env_file:
      - ../.env
    volumes:
      - ../configs/risk.yaml:/app/configs/risk.yaml:ro
      - ../configs/symbols.yaml:/app/configs/symbols.yaml:ro
      - ../configs/feeds.yaml:/app/configs/feeds.yaml:ro
      - ../data:/app/data
    depends_on:
      - redis
      - nats
    networks:
      - internal
    restart: unless-stopped

  ib-gateway:
    image: ghcr.io/gnzsnz/ib-gateway:latest
    environment:
      TWS_USERID: "${IB_USERID:-edemo}"
      TWS_PASSWORD: "${IB_PASSWORD:-demouser}"
      TRADING_MODE: "${IB_TRADING_MODE:-paper}"
      VNC_SERVER_PASSWORD: "${VNC_PASSWORD}"
      TZ: "${TZ:-UTC}"
    networks:
      - internal
    restart: unless-stopped

  execution-ib:
    build:
      context: ..
      dockerfile: infra/dockerfiles/execution_ib.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - nats
      - risk-manager
      - ib-gateway
    networks:
      - internal
    restart: unless-stopped

  execution-crypto:
    build:
      context: ..
      dockerfile: infra/dockerfiles/execution_crypto.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - nats
      - risk-manager
    networks:
      - internal
    restart: unless-stopped

  portfolio-ledger:
    build:
      context: ..
      dockerfile: infra/dockerfiles/portfolio_ledger.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - postgres
      - nats
    networks:
      - internal
    restart: unless-stopped

  backtest-engine:
    build:
      context: ..
      dockerfile: infra/dockerfiles/backtest_engine.Dockerfile
    env_file:
      - ../.env
    volumes:
      - ../reports:/app/reports
    networks:
      - internal
    restart: unless-stopped

  reporter:
    build:
      context: ..
      dockerfile: infra/dockerfiles/reporter.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - postgres
      - nats
    networks:
      - internal
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-autollm}
      POSTGRES_USER: ${POSTGRES_USER:-autollm}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    restart: unless-stopped

  redis:
    image: redis:7
    command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    networks:
      - internal
    restart: unless-stopped

  nats:
    image: nats:2.10
    command: ["-js"]
    ports:
      - "4222:4222"
    networks:
      - internal
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.51.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - internal
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.2
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD}"
      GF_SERVER_ROOT_URL: "${GF_SERVER_ROOT_URL:-http://grafana:3000}"
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - internal
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.2
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - ./loki/config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - internal
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.2
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./loki/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
    networks:
      - internal
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.25.0
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - internal
    restart: unless-stopped

networks:
  edge:
    driver: bridge
  internal:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  loki_data:
  caddy_data:
  caddy_config:
